name: CI

on:
  push:
    paths-ignore:
      - "**.md"
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      runtime:
        description: 'Target runtime'
        required: false
permissions:
  contents: write

jobs:
  test:
    runs-on: ${{ matrix.os }}
    # runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - name: Get the version from the yyp file
        shell: bash
        run: |
          echo "YYP_VERSION=$(grep -oP '(?<=IDEVersion":")(\d+\.\d+\.\d+\.\d+)(?=")' ${{ github.workspace }}/Ganary/Ganary.yyp)" >> $GITHUB_ENV  
      - uses: FedericoCarboni/setup-ffmpeg@v3
        if: runner.os == 'Linux'
      - name: Create the settings file
        if: runner.os == 'Linux'
        run: |
          echo '{"machine.Platform Settings.Android.Keystore.filename": "${{ github.workspace }}/ascx.keystore", "machine.Platform Settings.Android.Keystore.keystore_password": "${{ secrets.KEYSTORE_PASSWORD }}", "machine.Platform Settings.Android.Keystore.keystore_alias_password": "${{ secrets.KEYSTORE_PASSWORD }}", "machine.Platform Settings.Android.Keystore.alias": "${{ secrets.KEYSTORE_USERNAME }}"}' > local_settings.json
      - name: Set Up Android tools (Linux only)
        if: runner.os == 'Linux'
        run: |
          ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager \
          --sdk_root=$ANDROID_SDK_ROOT \
          "platform-tools"
      - uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/bootstrapper
            ${{ github.workspace }}/runtimes
          key: ${{ runner.os }}-${{ env.YYP_VERSION }}-${{ inputs.runtime}}
      - name: use Igor Setup
        uses: bscotch/igor-setup@main
        with:
          access-key: ${{ secrets.ACCESS_KEY }}
          target-yyp: ${{ github.workspace }}/Ganary/Ganary.yyp
          local-settings-override-file: ${{ github.workspace }}/local_settings.json
          runtime: ${{ inputs.runtime }}
        id: igor
      - name: Read settings-dir and echo the json content
        run: |
          echo "UserDir: ${{ steps.igor.outputs.settings-dir }}"
          # Read the json content
          cat ${{ steps.igor.outputs.settings-dir }}
      - name: use Igor build
        uses: bscotch/igor-build@main
        id: build
        with:
          yyp-path: ${{ github.workspace }}/Ganary/Ganary.yyp
          user-dir: ${{ steps.igor.outputs.user-dir }}
      - name: upload-build
        uses: actions/upload-artifact@v4
        with:
          name: igor-build-${{ matrix.os }}
          path: ${{ steps.build.outputs.out-dir }}
      - if: runner.os == 'Windows'
        name: Run Olympus test
        shell: pwsh
        run: |
          $baseName = Ganary
          $saveDataDir = Join-Path $env:LOCALAPPDATA $baseName

          $executableName = Ganary
          $exeDir = Resolve-Path "$executableName.exe"
          if (-not (Test-Path $exeDir)) {
              throw "$exeDir does not exist"
          }

          $logFile = "runLog.txt"
          if ((Test-Path $logFile)) {
            Remove-Item $logFile -Force
          }
          New-Item -Path $logFile -ItemType File -Force

          Write-Host "Running $exeDir"
          $process = Start-Process -FilePath $exeDir -ArgumentList "--olympus_headless","-output","$logFile","-debugoutput","$logFile" -PassThru -NoNewWindow

          if ((Test-Path $saveDataDir)) {
            Remove-Item $saveDataDir -Recurse -Force
          }


          $process.WaitForExit()
          Get-Content $logFile

          $success = $true
          $completeMessage = "Olympus test completed with no failure or crashes."

          $olympusResultDir = Join-Path $saveDataDir "Olympus_records/internal"

          # Iterate through all the json files in the directory
          $files = Get-ChildItem $olympusResultDir -Filter "*.json"
          foreach ($file in $files) {
              $filePath = $file.FullName
              $json = Get-Content $filePath | ConvertFrom-Json
              foreach ($test in $json.tests) {
                  if ($test.status -eq "failed" -or $test.status -eq "crashed") {
                      $failMessage = "$($test.name): $($test.status)"
                      Write-Host $failMessage
                      Add-Content $logFile $failMessage
                      $completeMessage = "Olympus test completed with failures or crashes."
                      $success = $false
                  }
              }
          }

          if ($success) {
              Write-Host $completeMessage
              exit 0
          } else {
              Write-Error $completeMessage
              exit 1
          }